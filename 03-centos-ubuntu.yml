---
- name: Provision and Configure Flask Web App
  hosts: g1
  become: yes

  vars:
    flask_app_directory: /home/{{ ansible_user }}/jenkins-ansible-flask-1
    flask_app_repo: https://github.com/kesienaf/jenkins-ansible-flask-1.git

  tasks:
    - name: Update package cache
      package:
        name:
          - python3
          - python3-devel
          - python3-pip
          - git
        state: latest
      when: ansible_distribution == 'CentOS'

    - name: Install EPEL repository
      package:
        name: epel-release
        state: present
      when: ansible_distribution == 'CentOS'

    - name: Update package cache
      apt:
        update_cache: yes
      when: ansible_distribution == 'Ubuntu'

    - name: Install required packages
      apt:
        name:
          - python3
          - python3-dev
          - python3-venv
          - python3-pip
          - git
        state: present
      when: ansible_distribution == 'Ubuntu'

    - name: Clone Flask app repository
      git:
        repo: "{{ flask_app_repo }}"
        dest: "{{ flask_app_directory }}"
        version: main
      environment:
        GIT_SSH_COMMAND: 'ssh -o StrictHostKeyChecking=no'

    - name: Install pip using ensurepip
      command: "python3 -m ensurepip"
      args:
        chdir: "{{ flask_app_directory }}"
      environment:
        PATH: "{{ flask_app_directory }}/venv/bin:{{ ansible_env.PATH }}"
      when: ansible_distribution == 'CentOS'

    - name: Install pip using apt
      apt:
        name: python3-pip
        state: present
      when: ansible_distribution == 'Ubuntu'
      become: yes

    - name: Upgrade pip
      command: "python3 -m pip install --upgrade pip"
      args:
        chdir: "{{ flask_app_directory }}"
      environment:
        PATH: "{{ flask_app_directory }}/venv/bin:{{ ansible_env.PATH }}"

    - name: Install virtualenv
      pip:
        name: virtualenv
        executable: pip3
        state: present

    - name: Create virtual environment
      command: python3 -m venv venv
      args:
        chdir: "{{ flask_app_directory }}"
      environment:
        PATH: "{{ flask_app_directory }}/venv/bin:{{ ansible_env.PATH }}"

    - name: Activate virtual environment
      command: "/bin/bash -c 'source {{ flask_app_directory }}/venv/bin/activate'"
      become: yes

    - name: Uninstall existing packages (if present)
      pip:
        name: "{{ item }}"
        state: absent
      with_items:
        - MarkupSafe
        - itsdangerous
        - click
        # Exclude 'blinker' from the list
        - Werkzeug
        - Jinja2
        - Flask
      when: ansible_distribution == 'Ubuntu'
      become: yes

    - name: Install Flask
      pip:
        name: Flask
        executable: pip3
        state: present
      when: ansible_distribution == 'CentOS'

    - name: Install Flask 
      pip:
        name: Flask
        executable: /usr/local/bin/pip
        state: present
      when: ansible_distribution == 'Ubuntu'

    - name: Install Gunicorn
      pip:
        name: gunicorn
        executable: pip3
        state: present
      when: ansible_distribution == 'CentOS'

    - name: Install Gunicorn 
      pip:
        name: gunicorn
        executable: /usr/local/bin/pip
        state: present
      when: ansible_distribution == 'Ubuntu'

    - name: Install Firewall
      package:
        name: firewalld
        state: present
      when: ansible_distribution == 'CentOS'

    - name: Install UFW (Uncomplicated Firewall)
      package:
        name: ufw
        state: present
      when: ansible_distribution == 'Ubuntu'

    - name: Configure Firewall for CentOS
      firewalld:
        port: 5000/tcp
        permanent: yes
        state: enabled
      notify:
        - restart firewalld
      when: ansible_distribution == 'CentOS'

    - name: Configure UFW for Ubuntu
      command: ufw allow 5000
      become: yes
      when: ansible_distribution == 'Ubuntu'

    - name: Restart firewalld for CentOS
      systemd:
        name: firewalld
        state: restarted
      become: yes
      when: ansible_distribution == 'CentOS'

    - name: Enable UFW for Ubuntu
      command: ufw --force enable
      become: yes
      when: ansible_distribution == 'Ubuntu'
...